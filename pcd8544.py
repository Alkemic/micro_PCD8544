import pyb

# http://micropython.org/doc/module/pyb/SPI
# http://www.python.rk.edu.pl/w/p/micro-python-i-pyboard-czyli-python-na-mikrokontrolerach-steruje-elektronika/
# https://www.sparkfun.com/datasheets/LCD/Monochrome/Nokia5110.pdf


class PCD8544(object):
    CMD_NOP = 0x00
    CMD_FUNCTION_SET = 0x20 # base value for normal functions
    CMD_FUNCTION_SET_EXTENDED = 0x21 # base value for extended functions

    CMD_DISPLAY_CONTROL = 0x08

    CMD_DISPLAY_BLANK = 0x08
    CMD_DISPLAY_ALL_ON = 0x09
    CMD_DISPLAY_NORMAL = 0x0C
    CMD_DISPLAY_INVERT = 0x0D

    CMD_BIAS_1_100 = 0x10  # 0b00010000
    CMD_BIAS_1_80 = 0x11  # 0b00010001
    CMD_BIAS_1_65 = 0x12  # 0b00010010
    CMD_BIAS_1_48 = 0x13  # 0b00010011
    CMD_BIAS_1_40 = 0x14  # 0b00010100
    CMD_BIAS_1_24 = 0x15  # 0b00010101
    CMD_BIAS_1_16 = 0x16  # 0b00010110
    CMD_BIAS_1_8 = 0x17  # 0b00010111

    VOP = 0xB0  # ???
    TEMP_COEF = 0x04  # ???

    ASCII = (
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x00
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x01
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x02
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x03
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x04
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x05
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x06
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x07
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x08
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x09
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x0a
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x0b
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x0c
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x0d
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x0e
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x0f
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x10
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x11
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x12
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x13
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x14
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x15
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x16
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x17
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x18
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x19
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x1a
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x1b
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x1c
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x1d
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x1e
        (0x00, 0x00, 0x00, 0x00, 0x00),  # 0x1f

        (0x00, 0x00, 0x00, 0x00, 0x00),    # Space
        (0x00, 0x00, 0x2f, 0x00, 0x00),  # !
        (0x00, 0x07, 0x00, 0x07, 0x00),  # "
        (0x0a, 0x1f, 0x0a, 0x1f, 0x0a),  # #
        (0x12, 0x15, 0x3f, 0x15, 0x09),  # $
        (0x13, 0x0b, 0x04, 0x1a, 0x19),  # %
        (0x0c, 0x12, 0x17, 0x09, 0x10),  # &
        (0x00, 0x00, 0x07, 0x00, 0x00),  # '
        (0x00, 0x0c, 0x12, 0x21, 0x00),  # (
        (0x00, 0x21, 0x12, 0x0c, 0x00),  # )
        (0x12, 0x0c, 0x1e, 0x0c, 0x12),  # *
        (0x04, 0x04, 0x1f, 0x04, 0x04),  # +
        (0x00, 0x40, 0x30, 0x00, 0x00),  # ,
        (0x04, 0x04, 0x04, 0x04, 0x04),  # -
        (0x00, 0x00, 0x10, 0x00, 0x00),  # .
        (0x10, 0x08, 0x04, 0x02, 0x01),  # /
        (0x0e, 0x19, 0x15, 0x13, 0x0e),  # 0
        (0x00, 0x12, 0x1f, 0x10, 0x00),  # 1
        (0x12, 0x19, 0x15, 0x15, 0x12),  # 2
        (0x09, 0x11, 0x15, 0x15, 0x0b),  # 3
        (0x0c, 0x0a, 0x09, 0x1f, 0x08),  # 4
        (0x17, 0x15, 0x15, 0x15, 0x08),  # 5
        (0x0e, 0x15, 0x15, 0x15, 0x08),  # 6
        (0x11, 0x09, 0x05, 0x03, 0x01),  # 7
        (0x0a, 0x15, 0x15, 0x15, 0x0a),  # 8
        (0x02, 0x15, 0x15, 0x15, 0x0e),  # 9
        (0x00, 0x00, 0x14, 0x00, 0x00),  # :
        (0x00, 0x20, 0x14, 0x00, 0x00),  # ;
        (0x00, 0x04, 0x0a, 0x11, 0x00),  # <
        (0x00, 0x0a, 0x0a, 0x0a, 0x00),  # =
        (0x00, 0x11, 0x0a, 0x04, 0x00),  # >
        (0x02, 0x01, 0x59, 0x09, 0x06),  # ?

        (0x3c, 0x42, 0x5a, 0x56, 0x1c),  # @
        (0x1e, 0x05, 0x05, 0x05, 0x1e),  # A
        (0x1f, 0x15, 0x15, 0x15, 0x0a),  # B
        (0x0e, 0x11, 0x11, 0x11, 0x0a),  # C
        (0x1f, 0x11, 0x11, 0x11, 0x0e),  # D
        (0x1f, 0x15, 0x15, 0x15, 0x11),  # E
        (0x1f, 0x05, 0x05, 0x05, 0x01),  # F
        (0x0e, 0x11, 0x15, 0x15, 0x1c),  # G
        (0x1f, 0x04, 0x04, 0x04, 0x1f),  # H
        (0x00, 0x11, 0x1f, 0x11, 0x00),  # I
        (0x08, 0x10, 0x10, 0x0f, 0x00),  # J
        (0x1f, 0x04, 0x0a, 0x11, 0x00),  # K
        (0x1f, 0x10, 0x10, 0x10, 0x10),  # L
        (0x1f, 0x02, 0x0c, 0x02, 0x1f),  # M
        (0x1f, 0x02, 0x04, 0x08, 0x1f),  # N
        (0x0e, 0x11, 0x11, 0x11, 0x0e),  # O
        (0x1f, 0x05, 0x05, 0x05, 0x02),  # P
        (0x0e, 0x11, 0x11, 0x19, 0x2e),  # Q
        (0x1f, 0x05, 0x05, 0x05, 0x1a),  # R
        (0x06, 0x15, 0x15, 0x15, 0x08),  # S
        (0x01, 0x01, 0x1f, 0x01, 0x01),  # T
        (0x0f, 0x10, 0x10, 0x10, 0x0f),  # U
        (0x07, 0x08, 0x10, 0x08, 0x07),  # V
        (0x1f, 0x10, 0x0c, 0x10, 0x1f),  # W
        (0x11, 0x0a, 0x04, 0x0a, 0x11),  # X
        (0x01, 0x02, 0x1c, 0x02, 0x01),  # Y
        (0x11, 0x19, 0x15, 0x13, 0x11),  # Z
        (0x00, 0x1f, 0x11, 0x11, 0x00),  # [
        (0x01, 0x02, 0x04, 0x08, 0x10),  # \
        (0x00, 0x11, 0x11, 0x1f, 0x00),  # ]
        (0x04, 0x02, 0x01, 0x02, 0x04),  # ^
        (0x10, 0x10, 0x10, 0x10, 0x10),  # _

        (0x00, 0x01, 0x02, 0x04, 0x00),  # `
        (0x08, 0x14, 0x14, 0x1c, 0x10),  # a
        (0x1f, 0x14, 0x14, 0x14, 0x08),  # b
        (0x0c, 0x12, 0x12, 0x12, 0x04),  # c
        (0x08, 0x14, 0x14, 0x14, 0x1f),  # d
        (0x1c, 0x2a, 0x2a, 0x2a, 0x0c),  # e
        (0x00, 0x08, 0x3e, 0x09, 0x02),  # f
        (0x48, 0x94, 0x94, 0x94, 0x68),  # g
        (0x1f, 0x08, 0x04, 0x04, 0x18),  # h
        (0x00, 0x10, 0x1d, 0x10, 0x00),  # i
        (0x20, 0x40, 0x3d, 0x00, 0x00),  # j
        (0x1f, 0x04, 0x0a, 0x10, 0x00),  # k
        (0x00, 0x01, 0x3e, 0x20, 0x00),  # l
        (0x1c, 0x04, 0x18, 0x04, 0x1c),  # m
        (0x1c, 0x08, 0x04, 0x04, 0x18),  # n
        (0x08, 0x14, 0x14, 0x14, 0x08),  # o
        (0xfc, 0x14, 0x14, 0x14, 0x08),  # p
        (0x08, 0x14, 0x14, 0xfc, 0x40),  # q
        (0x1c, 0x08, 0x04, 0x04, 0x08),  # r
        (0x10, 0x24, 0x2a, 0x2a, 0x10),  # s
        (0x00, 0x04, 0x1f, 0x24, 0x00),  # t
        (0x0c, 0x10, 0x10, 0x10, 0x0c),  # u
        (0x04, 0x08, 0x10, 0x08, 0x04),  # v
        (0x1c, 0x10, 0x0c, 0x10, 0x1c),  # w
        (0x14, 0x08, 0x08, 0x08, 0x14),  # x
        (0x4c, 0x90, 0x90, 0x90, 0x7c),  # y
        (0x24, 0x34, 0x2c, 0x24, 0x00),  # z
        (0x00, 0x04, 0x1b, 0x11, 0x00),  # {
        (0x00, 0x00, 0x7f, 0x00, 0x00),  # |
        (0x00, 0x11, 0x1b, 0x04, 0x00),  # }
        (0x04, 0x02, 0x04, 0x08, 0x04),  # ~
        (0x7F, 0x7F, 0x7F, 0x7F, 0x7F),    # DEL
    )

    def __init__(self, spi_bus=1, dc_pin='Y4', res_pin='Y3', width=84,
                 height=48, blocks=6):
        """
        After http://micropython.org/doc/module/pyb/SPI:
        > SPI(1) is on the X position: (NSS, SCK, MISO, MOSI) = (X5, X6, X7, X8) = (PA4, PA5, PA6, PA7)
        > SPI(2) is on the Y position: (NSS, SCK, MISO, MOSI) = (Y5, Y6, Y7, Y8) = (PB12, PB13, PB14, PB15)
        """
        # initialise SPI
        self.spi = pyb.SPI(spi_bus, pyb.SPI.MASTER, baudrate=600000,
                           polarity=1, phase=1, crc=0x7)

        # initialise controls (D/C, reset) GPIOs
        self.dc = pyb.Pin(dc_pin, pyb.Pin.OUT_PP, pyb.Pin.PULL_DOWN)
        self.res = pyb.Pin(res_pin, pyb.Pin.OUT_PP, pyb.Pin.PULL_DOWN)

        self.toggle_reset()
        self.function_set()  # Tells that we are in extended mode
        # self.command(0b10010000)
        self.function_set(extended_set=False)  # Tells that we are in normal mode

        # init display
        self.command(self.CMD_DISPLAY_NORMAL)
        self.goto_pixel(0, 0)

    def function_set(self, power_down=False, entry_mode='horizontal',
                     extended_set=True):
        """
        entry_mode (addressing):
          horizontal: 0
          vertical: 1
        """
        if entry_mode not in ('horizontal', 'vertical'):
            raise ValueError("`entry_mode` value must be 'horizontal' or 'vertical'!")

        cmd = self.CMD_FUNCTION_SET

        if power_down:
            cmd |= 1 << 2

        if entry_mode == 'vertical':
            cmd |= 1 << 1

        if extended_set:
            cmd |= 1 << 0

        self.command(cmd)

    def command(self, byte):
        """ Send command to display """
        self.dc.low()
        self.spi.send(byte)

    def toggle_reset(self):
        self.dc.high()
        self.dc.low()

    def write(self, data):
        self.dc.high()
        for part in self.ASCII[ord(data)]:
            self.spi.send(part)

    def goto_pixel(self, x, y):
        self.command(bin(0b01000000 | y))
        self.command(bin(0b10000000 | x))

    def goto_xy(self, line, post):
        pass

    def goto_line(self, line):
        pass
